{"version":3,"sources":["../../../src/lib/consistentObservable.js"],"names":["defaultEquals","x","y","IndependentObservable","value","_value","_baseChanged","baseChanged","pub","_transitionEnded","transitionEnded","_transitionEndedHandler","_handleTransitionEnd","bind","newValue","transition","Error","isEmpty","ended","addHandler","fire","newIndependent","ROWrapper","baseObservable","_baseObservable","_baseChangedHandler","peek","equals","newROWrapper","addROWrapper","Action","action","cleanup","runAutomatically","_cleanup","_action","_runAutomatically","_hasBaseChanged","_handleDependencyBaseChanged","_startListeningForTransitionEnd","_dependencyInfos","Map","_recordHandler","_record","_clean","_invalidated","run","close","_hasDependencyChanged","dependency","dependencyInfo","equalss","size","delete","removeHandler","clear","_enableBaseChanged","keys","currentValue","_hasSingleDependencyChanged","get","Set","set","add","newAction","ComputedObservable","calculation","recorder","_calculation","update","newComputed","inTransition","operation","parentTransition","result","isObservable","observable"],"mappings":"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","file":"consistentObservable.js","sourcesContent":["import { newOneTimeEvent } from 'one-time-event';\n\nexport const defaultEquals = (x, y) => {\n  return x === y;\n};\n\nexport class IndependentObservable {\n  constructor(value) {\n    this._value = value;\n    this._baseChanged = newOneTimeEvent();\n    this.baseChanged = this._baseChanged.pub;\n\n    this._transitionEnded = newOneTimeEvent();\n    this.transitionEnded = this._transitionEnded.pub;\n    this._transitionEndedHandler = this._handleTransitionEnd.bind(this);\n  }\n\n  // equals get, set\n\n  peek() {\n    return this._value;\n  }\n\n  set(newValue, transition) {\n    if (!transition) {\n      throw new Error('Can only set inside a transition.');\n    }\n    this._value = newValue;\n    if (!this._transitionEnded.isEmpty) {\n      /* [A] hidden feature: _transitionEnded\n       * is not registered in transition when handlers registered after set */\n      transition.ended.addHandler(this._transitionEndedHandler);\n    }\n    this._baseChanged.fire(this);\n  }\n\n  _handleTransitionEnd() {\n    this._transitionEnded.fire(this);\n  }\n}\n\nexport const newIndependent = (value) => {\n  return new IndependentObservable(value);\n};\n\nexport class ROWrapper {\n  constructor(baseObservable) {\n    this._baseObservable = baseObservable;\n\n    this._baseChanged = newOneTimeEvent(() =>\n      this._baseObservable.baseChanged.addHandler(this._baseChangedHandler));\n    this._baseChangedHandler =\n      this._baseChanged.fire.bind(this._baseChanged, this);\n    this.baseChanged = this._baseChanged.pub;\n\n    this._transitionEnded = newOneTimeEvent(() =>\n      this._baseObservable.transitionEnded.addHandler(\n        this._transitionEndedHandler));\n    this._transitionEndedHandler =\n      this._transitionEnded.fire.bind(this._transitionEnded, this);\n    this.transitionEnded = this._transitionEnded.pub;\n  }\n\n  get equals() { return this._baseObservable.equals; }\n\n  peek() { return this._baseObservable.peek(); }\n}\n\nexport const newROWrapper = (baseObservable) => {\n  return new ROWrapper(baseObservable);\n};\n\nexport const addROWrapper = (baseObservable) => {\n  baseObservable.pub = new ROWrapper(baseObservable);\n  return baseObservable;\n};\n\nexport class Action {\n  constructor(action, cleanup, runAutomatically = true) {\n    this._cleanup = cleanup;\n    this._action = action;\n    this._runAutomatically = runAutomatically;\n\n    this._baseChanged = newOneTimeEvent();\n    // invoked, when any dependency in the computation graph changes\n    this.baseChanged = this._baseChanged.pub;\n    this._hasBaseChanged = true;\n    this._baseChangedHandler = this._handleDependencyBaseChanged.bind(this);\n\n    this._transitionEnded = newOneTimeEvent(\n        this._startListeningForTransitionEnd.bind(this));\n    this._transitionEndedHandler = this._handleTransitionEnd.bind(this);\n    this.transitionEnded = this._transitionEnded.pub;\n\n    this._dependencyInfos = new Map(); // dependency → dependencyInfo\n\n    this._recordHandler = this._record.bind(this);\n\n    this._clean = true;\n\n    this._invalidated = false;\n\n    if (this._runAutomatically) {\n      this.run();\n    }\n  }\n\n  run() {\n    this.close();\n    this._action(this._recordHandler);\n    this._clean = false;\n    this._invalidated = false;\n    this._hasBaseChanged = false;\n  }\n\n  /* runs the action,\n   * if its computation is not in concert with its dependencies */\n  update() {\n    if (this._hasBaseChanged) {\n      if (this._invalidated || this._clean || this._hasDependencyChanged()) {\n        this.run();\n        for (const [dependency, dependencyInfo] of this._dependencyInfos) {\n          if (dependencyInfo.equalss.size === 0) {\n            this._dependencyInfos.delete(dependency);\n          }\n        }\n        return true;\n      }\n      this._hasBaseChanged = false;\n    }\n    return false;\n  }\n\n  close() {\n    if (!this._clean) {\n      this._clean = true;\n      this._hasBaseChanged = true;\n      for (const [dependency, dependencyInfo] of this._dependencyInfos) {\n        dependency.baseChanged.removeHandler(this._baseChangedHandler);\n        dependency.transitionEnded.removeHandler(this._transitionEndedHandler);\n        dependencyInfo.equalss.clear();\n      }\n      if (this._cleanup) {\n        this._cleanup();\n      }\n    }\n  }\n\n  // say that a not recorded dependency has changed\n  invalidate(transition) {\n    if (!transition) {\n      throw new Error('Can only invalidate inside a transition.');\n    }\n    this._invalidated = true;\n    // see [A]\n    if (!this._transitionEnded.isEmpty) {\n      transition.ended.addHandler(this._transitionEndedHandler);\n    }\n    this._enableBaseChanged();\n  }\n\n  _startListeningForTransitionEnd() {\n    if (!this._clean) {\n      for (const dependency of this._dependencyInfos.keys()) {\n        dependency.transitionEnded.addHandler(this._transitionEndedHandler);\n      }\n    }\n  }\n\n  _hasDependencyChanged() {\n    for (const [dependency, dependencyInfo] of this._dependencyInfos) {\n      if (dependencyInfo.baseChanged) {\n        const currentValue = dependency.peek();\n        if (Action._hasSingleDependencyChanged(dependencyInfo, currentValue)) {\n          return true;\n        }\n        dependency.baseChanged.addHandler(this._baseChangedHandler);\n      }\n    }\n    return false;\n  }\n\n  _handleDependencyBaseChanged(dependency) {\n    const dependencyInfo = this._dependencyInfos.get(dependency);\n    dependencyInfo.baseChanged = true;\n    this._enableBaseChanged();\n  }\n\n  _enableBaseChanged() {\n    if (!this._hasBaseChanged) {\n      this._hasBaseChanged = true;\n      this._baseChanged.fire(this);\n    }\n  }\n\n  _handleTransitionEnd(dependency) {\n    if (dependency) {\n      const dependencyInfo = this._dependencyInfos.get(dependency);\n      const currentValue = dependency.peek();\n      if (!Action._hasSingleDependencyChanged(dependencyInfo, currentValue)) {\n        dependencyInfo.baseChanged = false;\n        dependency.baseChanged.addHandler(this._baseChangedHandler);\n        dependency.transitionEnded.addHandler(this._transitionEndedHandler);\n        return;\n      }\n    }\n    if (this._runAutomatically) {\n      this.run();\n    }\n    this._transitionEnded.fire(this);\n  }\n\n  _record(dependency, equals) {\n    equals = equals || dependency.equals || defaultEquals;\n    let dependencyInfo = this._dependencyInfos.get(dependency);\n    if (!dependencyInfo) {\n      dependencyInfo = {\n        equalss: new Set(),\n        baseChanged: false\n      };\n      this._dependencyInfos.set(dependency, dependencyInfo);\n    }\n    if (dependencyInfo.equalss.size === 0) {\n      dependency.baseChanged.addHandler(this._baseChangedHandler);\n      if (this._runAutomatically || !this._transitionEnded.isEmpty) {\n        dependency.transitionEnded.addHandler(this._transitionEndedHandler);\n      }\n      dependencyInfo.value = dependency.peek();\n    }\n    dependencyInfo.equalss.add(equals);\n    return dependencyInfo.value;\n  }\n\n  static _hasSingleDependencyChanged(dependencyInfo, currentValue) {\n    for (const equals of dependencyInfo.equalss) {\n      if (!equals(dependencyInfo.value, currentValue)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport const newAction = (action, cleanup, runAutomatically) => {\n  return new Action(action, cleanup, runAutomatically);\n};\n\nexport class ComputedObservable extends Action {\n  constructor(calculation, cleanup) {\n    super((recorder) => {\n      this._value = this._calculation(recorder);\n    }, cleanup, false);\n    this._calculation = calculation;\n  }\n\n  // equals get, set\n\n  peek() {\n    this.update();\n    return this._value;\n  }\n}\n\nexport const newComputed = (calculation, cleanup) => {\n  return new ComputedObservable(calculation, cleanup);\n};\n\nexport const inTransition = (operation, parentTransition) => {\n  if (parentTransition) {\n    return operation(parentTransition);\n  }\n\n  const transitionEnded = newOneTimeEvent();\n\n  const transition = {\n    ended: transitionEnded.pub\n  };\n  let result;\n  try {\n    result = operation(transition);\n  } finally {\n    transitionEnded.fire();\n  }\n  return result;\n};\n\nexport const isObservable = (observable) => {\n  return observable.transitionEnded &&\n      observable.peek && observable.baseChanged;\n};\n"]}