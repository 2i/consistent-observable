{"version":3,"sources":["../../../src/lib/consistentObservable.js"],"names":["defaultEquals","x","y","IndependentObservable","value","_value","_baseChanged","baseChanged","pub","_transitionEnded","transitionEnded","_transitionEndedHandler","_handleTransitionEnd","bind","newValue","transition","Error","isEmpty","ended","addHandler","fire","_","rerunSignal","newIndependent","ROWrapper","baseObservable","_baseObservable","_baseChangedHandler","dependency","peek","equals","newROWrapper","addROWrapper","Action","action","cleanup","runAutomatically","_cleanup","_action","_runAutomatically","_hasBaseChanged","_handleDependencyBaseChanged","_startListeningForTransitionEnd","_rerunSignalHandler","_handleRerunSignal","_dependencyInfos","Map","_recordHandler","_record","_clean","_isFinallyClosed","_invalidated","_runAfterLastTransition","_runTwiceAfterLastTransition","run","_close","dependencyInfo","equalss","size","delete","_hasDependencyChanged","isFinal","removeHandler","clear","_enableBaseChanged","keys","currentValue","_hasSingleDependencyChanged","get","Set","set","add","newAction","ComputedObservable","calculation","recorder","_calculation","update","newComputed","newTransition","transitionEndedPub","inTransition","operation","parentTransition","result","isObservable","observable"],"mappings":"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","file":"consistentObservable.js","sourcesContent":["import { newOneTimeEvent } from 'one-time-event';\n\nexport const defaultEquals = (x, y) => {\n  return x === y;\n};\n\nexport class IndependentObservable {\n  constructor(value) {\n    this._value = value;\n    this._baseChanged = newOneTimeEvent();\n    this.baseChanged = this._baseChanged.pub;\n\n    this._transitionEnded = newOneTimeEvent();\n    this.transitionEnded = this._transitionEnded.pub;\n    this._transitionEndedHandler = this._handleTransitionEnd.bind(this);\n  }\n\n  // equals get, set\n\n  peek() {\n    return this._value;\n  }\n\n  set(newValue, transition) {\n    if (!transition) {\n      throw new Error('Can only set inside a transition.');\n    }\n    this._value = newValue;\n    if (!this._transitionEnded.isEmpty()) {\n      /* [A] hidden feature: _transitionEnded\n       * is not registered in transition when handlers registered after set */\n      transition.ended.addHandler(this._transitionEndedHandler);\n    }\n    this._baseChanged.fire(this);\n  }\n\n  _handleTransitionEnd(_, rerunSignal) {\n    this._transitionEnded.fire(this, rerunSignal);\n  }\n}\n\nexport const newIndependent = (value) => {\n  return new IndependentObservable(value);\n};\n\nexport class ROWrapper {\n  constructor(baseObservable) {\n    this._baseObservable = baseObservable;\n\n    this._baseChanged = newOneTimeEvent(() =>\n      this._baseObservable.baseChanged.addHandler(this._baseChangedHandler));\n    this._baseChangedHandler =\n      this._baseChanged.fire.bind(this._baseChanged, this);\n    this.baseChanged = this._baseChanged.pub;\n\n    this._transitionEnded = newOneTimeEvent(() =>\n      this._baseObservable.transitionEnded.addHandler(\n        this._transitionEndedHandler));\n    this._transitionEndedHandler = (dependency, rerunSignal) => {\n      this._transitionEnded.fire(this, rerunSignal);\n    };\n    this.transitionEnded = this._transitionEnded.pub;\n  }\n\n  get equals() { return this._baseObservable.equals; }\n\n  peek() { return this._baseObservable.peek(); }\n}\n\nexport const newROWrapper = (baseObservable) => {\n  return new ROWrapper(baseObservable);\n};\n\nexport const addROWrapper = (baseObservable) => {\n  baseObservable.pub = new ROWrapper(baseObservable);\n  return baseObservable;\n};\n\nexport class Action {\n  constructor(\n      action /* (recorder) */,\n      cleanup /* (isFinal) */,\n      runAutomatically = true) {\n    this._cleanup = cleanup;\n    this._action = action;\n    this._runAutomatically = runAutomatically;\n\n    this._baseChanged = newOneTimeEvent();\n    // invoked, when any dependency in the computation graph changes\n    this.baseChanged = this._baseChanged.pub;\n    this._hasBaseChanged = true;\n    this._baseChangedHandler = this._handleDependencyBaseChanged.bind(this);\n\n    this._transitionEnded = newOneTimeEvent(\n        this._startListeningForTransitionEnd.bind(this));\n    this.transitionEnded = this._transitionEnded.pub;\n    this._transitionEndedHandler = this._handleTransitionEnd.bind(this);\n\n    this._rerunSignalHandler = this._handleRerunSignal.bind(this);\n\n    this._dependencyInfos = new Map(); // dependency → dependencyInfo\n\n    this._recordHandler = this._record.bind(this);\n\n    this._clean = true;\n    this._isFinallyClosed = false;\n\n    this._invalidated = false;\n\n    this._runAfterLastTransition = false;\n    this._runTwiceAfterLastTransition = false;\n\n    if (this._runAutomatically) {\n      this.run();\n    }\n  }\n\n  run() {\n    if (this._isFinallyClosed) {\n      throw new Error('already finally closed');\n    }\n    if (this._runAfterLastTransition) {\n      this._runTwiceAfterLastTransition = true;\n    } else {\n      this._runAfterLastTransition = true;\n    }\n    this._close(false);\n    this._action(this._recordHandler);\n    this._clean = false;\n    this._invalidated = false;\n    this._hasBaseChanged = false;\n    for (const [dependency, dependencyInfo] of this._dependencyInfos) {\n      if (dependencyInfo.equalss.size === 0) {\n        this._dependencyInfos.delete(dependency);\n      }\n    }\n  }\n\n  /* runs the action,\n   * if its computation is not in concert with its dependencies */\n  update() {\n    if (!this._hasBaseChanged) {\n      return false;\n    }\n    if (this._invalidated || this._clean || this._hasDependencyChanged()) {\n      this.run();\n      return true;\n    }\n    this._hasBaseChanged = false;\n    return false;\n  }\n\n  close() {\n    this._close(true);\n  }\n\n  _close(isFinal) {\n    if (!this._clean) {\n      this._hasBaseChanged = true;\n      for (const [dependency, dependencyInfo] of this._dependencyInfos) {\n        dependency.baseChanged.removeHandler(this._baseChangedHandler);\n        dependency.transitionEnded.removeHandler(this._transitionEndedHandler);\n        dependencyInfo.equalss.clear();\n      }\n      if (this._cleanup) {\n        this._cleanup(isFinal);\n      }\n      this._clean = true;\n    }\n    if (isFinal) {\n      this._isFinallyClosed = true;\n    }\n  }\n\n  // say that a not recorded dependency has changed\n  invalidate(transition) {\n    if (!transition) {\n      throw new Error('Can only invalidate inside a transition.');\n    }\n    this._invalidated = true;\n    // see [A]\n    if (!this._transitionEnded.isEmpty()) {\n      transition.ended.addHandler(this._transitionEndedHandler);\n    }\n    this._enableBaseChanged();\n  }\n\n  _startListeningForTransitionEnd() {\n    if (!this._clean) {\n      for (const dependency of this._dependencyInfos.keys()) {\n        dependency.transitionEnded.addHandler(this._transitionEndedHandler);\n      }\n    }\n  }\n\n  _hasDependencyChanged() {\n    for (const [dependency, dependencyInfo] of this._dependencyInfos) {\n      if (dependencyInfo.baseChanged) {\n        const currentValue = dependency.peek();\n        if (Action._hasSingleDependencyChanged(dependencyInfo, currentValue)) {\n          return true;\n        }\n        dependency.baseChanged.addHandler(this._baseChangedHandler);\n      }\n    }\n    return false;\n  }\n\n  _handleDependencyBaseChanged(dependency) {\n    const dependencyInfo = this._dependencyInfos.get(dependency);\n    dependencyInfo.baseChanged = true;\n    this._enableBaseChanged();\n  }\n\n  _enableBaseChanged() {\n    if (!this._hasBaseChanged) {\n      this._hasBaseChanged = true;\n      this._baseChanged.fire(this);\n    }\n  }\n\n  _handleTransitionEnd(dependency, rerunSignal) {\n    if (dependency) {\n      const dependencyInfo = this._dependencyInfos.get(dependency);\n      if (!dependencyInfo) {\n        return;\n        /* may happen when transitionEnded event processing of dependency\n         * is in progress, as part of that has already triggered\n         * a rerun of `this` and dependency is not necessary anymore for\n         * `this`. */\n      }\n      const currentValue = dependency.peek();\n      if (!this._runTwiceAfterLastTransition &&\n          !Action._hasSingleDependencyChanged(dependencyInfo, currentValue)) {\n        dependencyInfo.baseChanged = false;\n        dependency.baseChanged.addHandler(this._baseChangedHandler);\n        dependency.transitionEnded.addHandler(this._transitionEndedHandler);\n        return;\n      }\n    }\n    this._runAfterLastTransition = false;\n    this._runTwiceAfterLastTransition = false;\n    this._close(false);\n\n    rerunSignal.addHandler(this._rerunSignalHandler);\n    this._transitionEnded.fire(this, rerunSignal);\n  }\n\n  _handleRerunSignal() {\n    if (this._runAutomatically && !this._isFinallyClosed) {\n      this.run();\n    }\n  }\n\n  _record(dependency, equals) {\n    equals = equals || dependency.equals || defaultEquals;\n    let dependencyInfo = this._dependencyInfos.get(dependency);\n    if (!dependencyInfo) {\n      dependencyInfo = {\n        equalss: new Set(),\n        baseChanged: false\n      };\n      this._dependencyInfos.set(dependency, dependencyInfo);\n    }\n    if (dependencyInfo.equalss.size === 0) {\n      dependency.baseChanged.addHandler(this._baseChangedHandler);\n      if (this._runAutomatically || !this._transitionEnded.isEmpty()) {\n        dependency.transitionEnded.addHandler(this._transitionEndedHandler);\n      }\n      dependencyInfo.value = dependency.peek();\n    }\n    dependencyInfo.equalss.add(equals);\n    return dependencyInfo.value;\n  }\n\n  static _hasSingleDependencyChanged(dependencyInfo, currentValue) {\n    for (const equals of dependencyInfo.equalss) {\n      if (!equals(dependencyInfo.value, currentValue)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport const newAction = (action, cleanup, runAutomatically) => {\n  return new Action(action, cleanup, runAutomatically);\n};\n\nexport class ComputedObservable extends Action {\n  constructor(calculation, cleanup) {\n    super((recorder) => {\n      this._value = this._calculation(recorder);\n    }, cleanup, false);\n    this._calculation = calculation;\n  }\n\n  // equals get, set\n\n  peek() {\n    this.update();\n    return this._value;\n  }\n}\n\nexport const newComputed = (calculation, cleanup) => {\n  return new ComputedObservable(calculation, cleanup);\n};\n\nexport const newTransition = (transitionEndedPub) => {\n  return {\n    ended: transitionEndedPub\n  };\n};\n\nexport const inTransition = (operation, parentTransition) => {\n  if (parentTransition) {\n    return operation(parentTransition);\n  }\n\n  const transitionEnded = newOneTimeEvent();\n  const transition = newTransition(transitionEnded.pub);\n\n  const rerunSignal = newOneTimeEvent();\n\n  let result;\n  try {\n    result = operation(transition);\n  } finally {\n    transitionEnded.fire(null, rerunSignal.pub);\n    rerunSignal.fire();\n  }\n  return result;\n};\n\nexport const isObservable = (observable) => {\n  return observable && observable.transitionEnded &&\n      observable.peek && observable.baseChanged;\n};\n"]}